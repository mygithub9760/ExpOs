
////////MEMORY MANAGER MODULE//////////

alias funcno R1;
alias pageno R2;
alias count R5;

//final version
//if function number corresponds to get free page function
if (funcno == 1) then	

	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;	//increment wait_mem_count
	
	while ([SYSTEM_STATUS_TABLE + 2] == 0) do 	//while memory if full(mem free count is 0)
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_MEM;	//set state as wait_mem

//print "wait";

		//invoking schedular
		backup;
		call MOD_5;
		restore;
	endwhile;

	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;	//decrement wait_mem_count
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;	//decrement mem_free_count

	count = 0;
	while (count < 128) do 	//finding a free page
		if ([MEMORY_FREE_LIST + count] == 0) then
			[MEMORY_FREE_LIST + count] = 1;
			R0 = count;
			return;
		endif;
		count = count + 1;
	endwhile;
	return;
endif;

//final version
//if function number corresponds to release page function
if (funcno == 2) then	

	[MEMORY_FREE_LIST + pageno]  = [MEMORY_FREE_LIST + pageno] - 1;	//decrement entry in mem free list
	
	if ([MEMORY_FREE_LIST + pageno] == 0) then	//if the page becomes free
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;	//increment mem_free_count
		count = 0;

		while (count < 16) do 
			if ([PROCESS_TABLE + 16*count + 4] == WAIT_MEM) then
				[PROCESS_TABLE + 16*count + 4] = READY;
			endif;
			count = count + 1;
		endwhile;
		
	endif;
	return;
endif;

//FINAL VERSION
//get free block
if (funcno == 3) then
	alias count R2;
	count = DISK_FREE_AREA;
	//from disk_free_area to disk_swap_area (reserved for data and executable files), find a free entry
	while (count<DISK_SWAP_AREA) do 
		if ([DISK_FREE_LIST + count] == 0) then
			[DISK_FREE_LIST + count] = 1;
			R0 = count;
			return;
		endif;
		count = count + 1;
	endwhile;

	R0 = -1;
	return;
endif;

//final version
//release block function is called
if (funcno == 4) then	
	//decrement disk free list value of corresponding block
	[DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
	return;
endif;

//final version
//if get code page function is called
if (funcno == 5) then	
	alias currpid R2;
	alias blockno R3;
	alias count R4;
	alias diskmap R5;

	count = 0;
	while (count < 16) do //check disk map table of all processes for corresponding block no
		diskmap = DISK_MAP_TABLE + 10*count;
		//if present and page table entry is valid, return page number and increase mem_free_list of the page
		if ([diskmap + 4] == blockno) then
			if ([PAGE_TABLE_BASE + 20*count + 8] != -1) then
				R0 = [PAGE_TABLE_BASE + 20*count + 8];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
				return;
			endif;
		endif;

		if ([diskmap + 5] == blockno) then
			if ([PAGE_TABLE_BASE + 20*count + 10] != -1) then
				R0 = [PAGE_TABLE_BASE + 20*count + 10];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
				return;
			endif;
		endif;

		if ([diskmap + 6] == blockno) then
			if ([PAGE_TABLE_BASE + 20*count + 12] != -1) then
				R0 = [PAGE_TABLE_BASE + 20*count + 12];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
				return;
			endif;
		endif;

		if ([diskmap + 7] == blockno) then
			if ([PAGE_TABLE_BASE + 20*count + 14] != -1) then
				R0 = [PAGE_TABLE_BASE + 20*count + 14];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
				return;
			endif;
		endif;
		count = count + 1;
	endwhile;
	//allocate new page
	R1 = 1;
	call MOD_2;

	//call disk load function
	R1 = 2;
	R2 = currpid;
	R4 = blockno;
	R3 = R0;

	call MOD_4;
	return;
endif;

//FINAL VERSION
//get swap block function
if (funcno == 6) then
	alias count R1;
	count = DISK_SWAP_AREA;
	
	//find free entry in the disk swap area
	while (count < 512) do 
		if ([DISK_FREE_LIST + count] == 0) then
			[DISK_FREE_LIST + count] = 1;
			R0 = count;
			return;
		endif;
		count = count + 1;
	endwhile;

	//if no entry is found, return -1
	R0 = -1;
	return;
endif;