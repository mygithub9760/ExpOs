
//////////SEMGET AND SEMRELEASE SYSTEM CALLS/////////

alias usersp R1;
usersp = SP;

//switch to kernel stack
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] = SP;
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 - 1;

//find return address
alias retadd R2;
retadd = [PTBR + 2*(usersp - 1)/512]*512 + (usersp-1)%512;

//get the system call number
alias syscallno R3;
syscallno = [[PTBR + 2*(usersp - 5)/512]*512 + (usersp-5)%512];


//FINAL VERSION
//if semget is invoked
if (syscallno == 17) then

	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 17;	//set mode flag

	alias count R4;
	alias userpageno R5;
	count = 496;
	userpageno = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11];
	while (count<512) do 	//find a free index in per process resourse table
		if ([userpageno*512 + count] == -1) then
			break;
		endif;
		count = count + 2;
	endwhile;

	if (count==512) then	//if no free index is available, return -1
		[retadd] = -1;
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;
		SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];
		ireturn;
	endif;

	[userpageno*512 + count] = SEMAPHORE;	//set resource identifier to 1(semaphore)

	//call acquire semaphore in resource manager module
	multipush(R1,R2,R3,R4,R5);
	R1 = 6;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);

	alias semid R6;
	semid = R0;
	if(semid==-1) then	//if no semaphore is free
		[retadd] = -2;
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;
		SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];
		ireturn;
	endif;

	[userpageno*512 + count + 1] = semid;	//store index in per process resource table

	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;	//reset mode flag
	SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];

	[retadd] = (count-496)/2;	//return semaphore descriptor

	ireturn;
endif;


//FINAL VERSION
//if semrelease is invoked
if (syscallno == 18) then

	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 17;	//set mode flag
	
	//get semaphore descriptor argument
	alias semdesc R4;
	semdesc = [[PTBR + 2*(usersp-4)/512]*512 + (usersp-4)%512];

	alias userpageno R5;
	userpageno = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11];

	//if semdesc in invalid
	if(semdesc<0 || semdesc>7 || [userpageno*512 + 496 + 2*semdesc]==-1) then
		[retadd]=-1;	//return -1
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9]=0;
		SP=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];
		ireturn;
	endif;
	
	//call semrelease in resource maanger module
	backup;
	R1 = 7;
	R2 = [userpageno*512 + 496 + 2*semdesc + 1];
	R3 = [SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	restore;

	[userpageno*512 + 496 + 2*semdesc] = -1;	//invalidate per process resource table entry

	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
	SP=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];

	[retadd] = 0;
	ireturn;
endif;