//FINAL VERSION
//////SHUTDOWN SYSTEM CALL///////

alias usersp R1;
usersp = SP;

//switch to kernel stack
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] = SP;
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 - 1;

//find return address
alias retadd R2;
retadd = [PTBR + 2*(usersp - 1)/512]*512 + (usersp-1)%512;

//get the system call number
alias syscallno R3;
syscallno = [[PTBR + 2*(usersp - 5)/512]*512 + (usersp-5)%512];

//shutdown system call
if (syscallno == 21) then
	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 21;
	


	//if current process is not shell or not the root, return -1
	if([SYSTEM_STATUS_TABLE + 1] != 2 || [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3] != 1) then
		[retadd] = -1;
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
		SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];
		ireturn;
	endif;



	//call kill all function in process manager
	backup;
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	restore;


	//for every entry in buffer table
	alias count R5;
	count = 0;
	while (count<4) do 
		if ([BUFFER_TABLE + 4*count] != -1) then
			//if entry is valid and dirty bit is set, call disk store function
			if ([BUFFER_TABLE + 4*count + 1] == 1)	then
				
				//call disk store function in device manager
				backup;
				R1 = 1;
				R2 = [SYSTEM_STATUS_TABLE+1];
				R3 = 71+count;	//page no
				R4 = [BUFFER_TABLE + 4*count];	//block no
				
				call MOD_4;
				restore;
			endif;
		endif;
		count = count+1;
	endwhile;

	//commit(store) changes made in inode table, disk free list, root file into the disk
	backup;
	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = 59;	// inode table page 1
	R4 = 3;
	call MOD_4;

	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = 60;	// inode table page 2
	R4 = 4;
	call MOD_4;

	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = 62;	// root file
	R4 = 5;
	call MOD_4;

	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = 61;		// disk free list
	R4 = 2;
	call MOD_4;
	
	restore;

	halt;
endif;