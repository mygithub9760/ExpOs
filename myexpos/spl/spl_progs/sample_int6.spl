//FINAL VERSION
////////READ SYSTEM CALL//////////

//set mode flag of current process to 7(read system call)
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 7;



//save user stack pointer
alias usersp R0;
usersp = SP;

//switch to kernel stack
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] = SP;
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 - 1;

//retreiving the file descriptor
alias filedesc R1;
filedesc = [[PTBR + 2*(usersp - 4)/512]*512 + ((usersp-4)%512)];


//finding the return address
alias retadd R2;
retadd = (([PTBR + 2*(usersp - 1)/512])*512) + ((usersp-1)%512);

alias word_add R3;
word_add = [(([PTBR + 2*(usersp-3)/512])*512) + ((usersp - 3)%512)];

//if input is to be read form terminal, call terminal read in module 4
if (filedesc == -1) then	
	//call read terminal function
	backup;
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word_add;
	call MOD_4;	//calling device manager module(module 4)
	restore;
	
	[retadd] = 0;	//success

else


	alias userpageno R4;
	userpageno = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 11];
	

	//if file descriptor is invalid or resource entry is not valid, return -1
	if (filedesc<0 || filedesc>7 || [userpageno*512 + 496 + 2*filedesc] != FILE) then
		[retadd] = -1;
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
		SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];
		ireturn;
	endif;

	//get the index of open file table
	alias fileindex R5;
	fileindex = [userpageno*512 + 496 + 2*filedesc + 1];

	//get inode index
	alias inodeindex R6;
	inodeindex = [OPEN_FILE_TABLE + 4*fileindex];

	//call acquire inode in resource manager module
	multipush(R1,R2,R3,R4,R5,R6);
	R1 = 4;
	R2 = inodeindex;
	R3 = [SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6);


	//if acquire inode fails, return -1
	if (R0 == -1) then
		[retadd] = -1;
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
		SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13];
		ireturn;
	endif;		



	alias lseek R7;
	lseek = [OPEN_FILE_TABLE + 4*fileindex + 2];




	//get physical address corresponding to the logical address sent as argument
	alias phywordadd R8;
	phywordadd = [PTBR + 2*word_add/512]*512 + (word_add)%512;

	//if file is root file
	if (inodeindex == INODE_ROOT) then
		if (lseek == 480) then
			//call release inode
			backup;
			R1 = 5;
			R2 = inodeindex;
			R3 = [SYSTEM_STATUS_TABLE+1];
			call MOD_0;
			restore;
			//return -2
			[retadd] = -2;
			[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;
			SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];
			ireturn;
		endif;

		//read the word at lseek position for memory copy of root file
		[phywordadd] = [ROOT_FILE + lseek];

		//increment lseek position
		[OPEN_FILE_TABLE + 4*fileindex + 2] = [OPEN_FILE_TABLE + 4*fileindex + 2] + 1;

	else
		//if lseek value is same as file size
		if (lseek == [INODE_TABLE + 16*inodeindex + 2]) then

		
			//call release inode
			backup;
			R1 = 5;
			R2 = inodeindex;
			R3 = [SYSTEM_STATUS_TABLE+1];
			call MOD_0;
			restore;
			//return -2
			[retadd] = -2;
			[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;
			SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];
			ireturn;
		endif;

		alias blockindex R9;
		alias offset R10;
		blockindex = lseek/512;	//block index
		offset = lseek%512;	//block offset

		alias diskblockno R11;
		diskblockno = [INODE_TABLE + 16*inodeindex + 8 + blockindex];	//block number



		//call buffer read form file manager module
		backup;
		R1 = 2;
		R2 = diskblockno;
		R3 = offset;
		R4 = phywordadd;
		call MOD_3;
		restore;

		//increment lseek position
		[OPEN_FILE_TABLE + 4*fileindex + 2] = [OPEN_FILE_TABLE + 4*fileindex + 2] + 1;

	endif;

	//call release inode
	backup;
	R1 = 5;
	R2 = inodeindex;
	R3 = [SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	restore;



endif;



//reset mode flag (0 indicates process is in user mode)
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 0;

//changing back to user stack
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];
[retadd] = 0;

//transfer control to user program
ireturn;	
